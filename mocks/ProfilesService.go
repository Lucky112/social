// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Lucky112/social/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ProfilesService is an autogenerated mock type for the ProfilesService type
type ProfilesService struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, profile
func (_m *ProfilesService) Add(ctx context.Context, profile *models.Profile) (string, error) {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Profile) (string, error)); ok {
		return rf(ctx, profile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Profile) string); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Profile) error); ok {
		r1 = rf(ctx, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *ProfilesService) Get(ctx context.Context, id string) (*models.Profile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Profile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProfilesService) GetAll(ctx context.Context) ([]*models.Profile, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Profile, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Profile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, params
func (_m *ProfilesService) Search(ctx context.Context, params *models.SearchParams) ([]*models.Profile, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*models.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SearchParams) ([]*models.Profile, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.SearchParams) []*models.Profile); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.SearchParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProfilesService creates a new instance of ProfilesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfilesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfilesService {
	mock := &ProfilesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
