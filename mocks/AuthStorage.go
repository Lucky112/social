// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/Lucky112/social/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AuthStorage is an autogenerated mock type for the AuthStorage type
type AuthStorage struct {
	mock.Mock
}

// Add provides a mock function with given fields: userId, user
func (_m *AuthStorage) Add(userId string, user *models.User) error {
	ret := _m.Called(userId, user)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.User) error); ok {
		r0 = rf(userId, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: userId
func (_m *AuthStorage) Exists(userId string) bool {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: userId
func (_m *AuthStorage) Get(userId string) (*models.User, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthStorage creates a new instance of AuthStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthStorage {
	mock := &AuthStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
